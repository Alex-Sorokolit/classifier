{"version":3,"file":"static/js/609.e5313535.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegisterForm.styled.js","components/CompleteRegistrationForm/CompleteRegistrationForm.jsx","pages/CompleteRegistrationPage/CompleteRegistrationPage.jsx","webpack://classifier/./src/components/RegistrationForm/RegistrationForm.module.css?5637"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Form, Field } from \"formik\";\r\n\r\nexport const StyledForm = styled(Form)`\r\n  width: 300px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const InputWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Input = styled(Field)`\r\n  background-color: ${(props) => props.theme.colors.backgroundWhite};\r\n  border: ${(props) => props.theme.borders.bold};\r\n  border-color: ${({ bordercolor }) => bordercolor};\r\n  border-radius: ${(props) => props.theme.radii.normal};\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  letter-spacing: -0.02em;\r\n  /* padding: 12px 12px 12px 40px; */\r\n  padding: 4px;\r\n  color: ${(props) => props.theme.colors.black};\r\n\r\n  @media screen and (min-width: 480px) {\r\n    font-size: 14px;\r\n    padding: 8px;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    border: ${(props) => props.theme.borders.bold};\r\n    /* background-color: ${(props) => props.theme.colors.backgroundWhite}; */\r\n    border-color: ${({ bordercolor }) => bordercolor};\r\n  }\r\n`;\r\n\r\nexport const StyledLink = styled(NavLink)`\r\n  &:hover,\r\n  &:focus {\r\n    color: ${(props) => props.theme.colors.hover};\r\n  }\r\n`;\r\n\r\nexport const ErrorMessageStyled = styled.div`\r\n  color: ${(props) => props.theme.colors.invalid};\r\n  position: absolute;\r\n  right: 0;\r\n`;\r\n\r\nexport const FormButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding-top: 10px;\r\n  padding-bottom: 20px;\r\n  @media screen and (min-width: 480px) {\r\n    padding-top: 20px;\r\n    padding-bottom: 20px;\r\n  }\r\n`;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { authContext as context } from \"../../context/authContext\";\r\nimport { token } from \"../../services/api\";\r\n\r\nimport { Formik, ErrorMessage } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { validationColor } from \"../../services/utility\";\r\nimport { Button } from \"../Button/Button\";\r\nimport css from \"../RegistrationForm/RegistrationForm.module.css\";\r\nimport {\r\n  StyledForm,\r\n  Input,\r\n  InputWrapper,\r\n  ErrorMessageStyled,\r\n  FormButtonWrapper,\r\n} from \"../RegistrationForm/RegisterForm.styled\";\r\n\r\nconst CompleteRegistrationForm = () => {\r\n  // const [token, setTokenState] = useState(null);\r\n  const { onCompleteRegistration, setToken } = useContext(context);\r\n  const { userId } = useParams();\r\n  const location = useLocation();\r\n\r\n  const initialValues = {\r\n    lastName: \"\",\r\n    company: \"\",\r\n    jobRole: \"\",\r\n    phone: \"\",\r\n  };\r\n\r\n  const registerSchema = yup.object().shape({\r\n    lastName: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    company: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    jobRole: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    phone: yup\r\n      .string()\r\n      .matches(/^\\d+$/, \"Invalid phone number\") // Перевірка на наявність тільки цифр\r\n      .min(10, \"Too short phone number\") // Мінімальна довжина номера\r\n      .max(15, \"Too long phone number\") // Максимальна довжина номера\r\n      .required(\"Required\"), // Обов'язкове поле\r\n  });\r\n\r\n  useEffect(() => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const tokenParam = searchParams.get(\"token\");\r\n    console.log(\"tokenParam: \", tokenParam);\r\n\r\n    if (tokenParam) {\r\n      setToken(tokenParam);\r\n      token.set(tokenParam);\r\n      // setTokenState(tokenParam);\r\n    }\r\n  }, [location, setToken]);\r\n\r\n  const handleSubmit = (values, actions) => {\r\n    // console.log(\"actions: \", actions);\r\n    // console.log(\"values: \", values);\r\n    const { resetForm } = actions;\r\n\r\n    const userCredentials = {\r\n      userId: userId,\r\n      ...values,\r\n    };\r\n\r\n    // Передача даних в контекст (глобальний стейт)\r\n    onCompleteRegistration(userCredentials);\r\n\r\n    // Очистка форми\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={registerSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {(props) => (\r\n          <StyledForm>\r\n            <h2>Complete registration</h2>\r\n\r\n            <InputWrapper>\r\n              <label htmlFor=\"lastName\" className={css.label}>\r\n                Last Name\r\n              </label>\r\n              <Input\r\n                name=\"lastName\"\r\n                type=\"text\"\r\n                id=\"lastName\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.lastName,\r\n                  props.values.lastName,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"lastName\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"company\" className={css.label}>\r\n                Company\r\n              </label>\r\n              <Input\r\n                name=\"company\"\r\n                type=\"text\"\r\n                id=\"company\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.company,\r\n                  props.values.company,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"company\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"jobRole\" className={css.label}>\r\n                Job Role\r\n              </label>\r\n              <Input\r\n                name=\"jobRole\"\r\n                type=\"text\"\r\n                id=\"jobRole\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.jobRole,\r\n                  props.values.jobRole,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"jobRole\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"phone\" className={css.label}>\r\n                Phone\r\n              </label>\r\n              <Input\r\n                name=\"phone\"\r\n                type=\"phone\"\r\n                id=\"phone\"\r\n                bordercolor={validationColor(\r\n                  props.errors.phone,\r\n                  props.values.phone,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"phone\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n\r\n            <FormButtonWrapper>\r\n              <Button type=\"submit\">Send</Button>\r\n            </FormButtonWrapper>\r\n          </StyledForm>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompleteRegistrationForm;\r\n","import React from \"react\";\r\nimport Section from \"../../components/Section/Section\";\r\nimport CompleteRegistrationForm from \"../../components/CompleteRegistrationForm/CompleteRegistrationForm\";\r\n\r\nconst CompleteRegistrationPage = () => {\r\n  return (\r\n    <Section>\r\n      <CompleteRegistrationForm />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default CompleteRegistrationPage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"RegistrationForm_formWrapper__M4W+A\",\"form\":\"RegistrationForm_form__jPyEh\",\"inputWrapper\":\"RegistrationForm_inputWrapper__sw4lF\",\"label\":\"RegistrationForm_label__AWBTb\",\"input\":\"RegistrationForm_input__bRufy\",\"submitBtn\":\"RegistrationForm_submitBtn__lVhX-\",\"loginBtn\":\"RegistrationForm_loginBtn__zQTqO\"};"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","InputWrapper","div","_templateObject2","Input","Field","_templateObject3","props","theme","colors","backgroundWhite","borders","bold","_ref","bordercolor","radii","normal","black","_ref2","StyledLink","NavLink","_templateObject4","hover","ErrorMessageStyled","_templateObject5","invalid","FormButtonWrapper","_templateObject6","_useContext","useContext","context","onCompleteRegistration","setToken","userId","useParams","location","useLocation","registerSchema","yup","shape","lastName","min","max","required","company","jobRole","phone","matches","useEffect","tokenParam","URLSearchParams","search","get","console","log","token","set","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","userCredentials","_objectSpread","_jsxs","htmlFor","className","css","label","name","type","id","validationColor","errors","ErrorMessage","render","msg","Button","Section","CompleteRegistrationForm"],"sourceRoot":""}