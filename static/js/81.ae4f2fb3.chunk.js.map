{"version":3,"file":"static/js/81.ae4f2fb3.chunk.js","mappings":"0PAIaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0JAUzBC,EAAeJ,EAAAA,GAAOK,IAAGC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8FAOzBI,GAAQP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAaS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,8WACZ,SAACO,GAAK,OAAKA,EAAMC,MAAMC,OAAOC,eAAe,IACvD,SAACH,GAAK,OAAKA,EAAMC,MAAMG,QAAQC,IAAI,IAC7B,SAAAC,GAAc,OAAAA,EAAXC,WAA6B,IAC/B,SAACP,GAAK,OAAKA,EAAMC,MAAMO,MAAMC,MAAM,IAO3C,SAACT,GAAK,OAAKA,EAAMC,MAAMC,OAAOQ,KAAK,IAIhC,SAACV,GAAK,OAAKA,EAAMC,MAAMG,QAAQC,IAAI,IACtB,SAACL,GAAK,OAAKA,EAAMC,MAAMC,OAAOC,eAAe,IACpD,SAAAQ,GAAc,OAAAA,EAAXJ,WAA6B,IAIvCK,GAAatB,EAAAA,EAAAA,IAAOuB,EAAAA,GAAPvB,CAAewB,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,yDAG5B,SAACO,GAAK,OAAKA,EAAMC,MAAMC,OAAOa,KAAK,IAMnCC,GAFQ1B,EAAAA,GAAO2B,MAAKC,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,QAECH,EAAAA,GAAOK,IAAGwB,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,6DACjC,SAACO,GAAK,OAAKA,EAAMC,MAAMC,OAAOkB,OAAO,KAKnCC,EAAoB/B,EAAAA,GAAOK,IAAG2B,IAAAA,GAAA7B,EAAAA,EAAAA,GAAA,mH,oBCxD3C,EAAwK,gC,SC6OxK,EA5NyB,WACvB,IAAQ8B,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAA1BF,WAQFG,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,SAAUN,EAAAA,KAEPG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZE,QAASP,EAAAA,KAENG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZG,QAASR,EAAAA,KAENG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZI,MAAOT,EAAAA,KAAaS,MAAM,iBAAiBJ,SAAS,YACpDK,MAAOV,EAAAA,KAEJW,QAAQ,QAAS,wBACjBR,IAAI,GAAI,0BACRC,IAAI,GAAI,yBACRC,SAAS,YACZO,SAAUZ,EAAAA,KAEPG,IAAI,EAAG,0BACPC,IAAI,GAAI,4BACRO,QAAQ,QAAS,iDACjBA,QACC,yEACA,iDAEDA,QAAQ,6EAA4B,2BACpCN,SAAS,uBAed,OACEQ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,cA9DgB,CACpBf,KAAM,GACNO,MAAO,GACPG,SAAU,IA4DNM,iBAAkBnB,EAClBoB,SAjBe,SAACC,EAAQC,GAG5B,IAAQC,EAAcD,EAAdC,UAGR1B,EAAWwB,GAGXE,GACF,EAO6BP,SAEtB,SAAC1C,GAAK,OACLkD,EAAAA,EAAAA,MAAC7D,EAAU,CAAAqD,SAAA,EACTF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJQ,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,OAAOC,UAAWC,EAAUX,SAAC,UAG5CF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,OACLyB,KAAK,OACLC,GAAG,OACHC,WAAS,EACTjD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAO7B,KACb7B,EAAM+C,OAAOlB,KACb,mBAGJW,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,OACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,WAAWC,UAAWC,EAAUX,SAAC,eAGhDF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,WACLyB,KAAK,OACLC,GAAG,WAEHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOzB,SACbjC,EAAM+C,OAAOd,SACb,mBAGJO,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,WACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,UAAUC,UAAWC,EAAUX,SAAC,aAG/CF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,UACLyB,KAAK,OACLC,GAAG,UAEHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOxB,QACblC,EAAM+C,OAAOb,QACb,mBAGJM,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,UACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,UAAUC,UAAWC,EAAUX,SAAC,cAG/CF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,UACLyB,KAAK,OACLC,GAAG,UAEHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOvB,QACbnC,EAAM+C,OAAOZ,QACb,mBAGJK,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,UACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,QAAQC,UAAWC,EAAUX,SAAC,WAG7CF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,QACLyB,KAAK,QACLC,GAAG,QACHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOrB,MACbrC,EAAM+C,OAAOV,MACb,mBAGJG,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,QACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,QAAQC,UAAWC,EAAUX,SAAC,WAG7CF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,QACLyB,KAAK,QACLC,GAAG,QACHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOtB,MACbpC,EAAM+C,OAAOX,MACb,mBAGJI,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,QACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAACxD,EAAY,CAAAgD,SAAA,EACXF,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,WAAWC,UAAWC,EAAUX,SAAC,cAGhDF,EAAAA,EAAAA,KAAC3C,EAAK,CACJgC,KAAK,WACLyB,KAAK,WACLC,GAAG,WACHhD,aAAakD,EAAAA,EAAAA,IACXzD,EAAM0D,OAAOnB,SACbvC,EAAM+C,OAAOR,SACb,mBAGJC,EAAAA,EAAAA,KAACmB,EAAAA,GAAY,CACX9B,KAAK,WACL+B,OAAQ,SAACC,GAAG,OAAKrB,EAAAA,EAAAA,KAACxB,EAAkB,CAAA0B,SAAEmB,GAAyB,QAGnEX,EAAAA,EAAAA,MAAC7B,EAAiB,CAAAqB,SAAA,EAChBF,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CAACR,KAAK,SAAQZ,SAAC,UACtBF,EAAAA,EAAAA,KAAC5B,EAAU,CAACmD,GAAI,SAASrB,SAAC,eAEjB,KAKvB,ECjOA,EARqB,WACnB,OACEF,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,CAAAtB,UACNF,EAAAA,EAAAA,KAACyB,EAAgB,KAGvB,C","sources":["components/RegistrationForm/RegisterForm.styled.js","webpack://classifier/./src/components/RegistrationForm/RegistrationForm.module.css?5637","components/RegistrationForm/RegistrationForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Form, Field } from \"formik\";\r\n\r\nexport const StyledForm = styled(Form)`\r\n  width: 300px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  align-items: center;\r\n`;\r\n\r\nexport const InputWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Input = styled(Field)`\r\n  background-color: ${(props) => props.theme.colors.backgroundWhite};\r\n  border: ${(props) => props.theme.borders.bold};\r\n  border-color: ${({ bordercolor }) => bordercolor};\r\n  border-radius: ${(props) => props.theme.radii.normal};\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  letter-spacing: -0.02em;\r\n  /* padding: 12px 12px 12px 40px; */\r\n  padding: 8px;\r\n  color: ${(props) => props.theme.colors.black};\r\n\r\n  &:hover,\r\n  &:focus {\r\n    border: ${(props) => props.theme.borders.bold};\r\n    /* background-color: ${(props) => props.theme.colors.backgroundWhite}; */\r\n    border-color: ${({ bordercolor }) => bordercolor};\r\n  }\r\n`;\r\n\r\nexport const StyledLink = styled(NavLink)`\r\n  &:hover,\r\n  &:focus {\r\n    color: ${(props) => props.theme.colors.hover};\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label``;\r\n\r\nexport const ErrorMessageStyled = styled.div`\r\n  color: ${(props) => props.theme.colors.invalid};\r\n  position: absolute;\r\n  right: 0;\r\n`;\r\n\r\nexport const FormButtonWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding-top: 20px;\r\n`;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"RegistrationForm_formWrapper__M4W+A\",\"form\":\"RegistrationForm_form__jPyEh\",\"inputWrapper\":\"RegistrationForm_inputWrapper__sw4lF\",\"label\":\"RegistrationForm_label__AWBTb\",\"input\":\"RegistrationForm_input__bRufy\",\"submitBtn\":\"RegistrationForm_submitBtn__lVhX-\",\"loginBtn\":\"RegistrationForm_loginBtn__zQTqO\"};","import React, { useContext } from \"react\";\r\nimport { authContext as context } from \"../../context/authContext\";\r\nimport { Formik, ErrorMessage } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport {\r\n  StyledForm,\r\n  Input,\r\n  InputWrapper,\r\n  StyledLink,\r\n  ErrorMessageStyled,\r\n  FormButtonWrapper,\r\n} from \"./RegisterForm.styled\";\r\nimport { Button } from \"../Button/Button\";\r\nimport { validationColor } from \"../../services/utility\";\r\n\r\n// Навігація\r\nimport css from \"./RegistrationForm.module.css\";\r\n\r\nconst RegistrationForm = () => {\r\n  const { onRegister } = useContext(context);\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const registerSchema = yup.object().shape({\r\n    name: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    lastName: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    company: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    jobRole: yup\r\n      .string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    email: yup.string().email(\"Invalid email\").required(\"Required\"),\r\n    phone: yup\r\n      .string()\r\n      .matches(/^\\d+$/, \"Invalid phone number\") // Перевірка на наявність тільки цифр\r\n      .min(10, \"Too short phone number\") // Мінімальна довжина номера\r\n      .max(15, \"Too long phone number\") // Максимальна довжина номера\r\n      .required(\"Required\"), // Обов'язкове поле\r\n    password: yup\r\n      .string()\r\n      .min(6, \"Your password is short\")\r\n      .max(16, \"Your password is to long\")\r\n      .matches(/[1-9]/, \"Your password is little secure. Add a number!\")\r\n      .matches(\r\n        /[a-zа-яA-ZА-ЯіїЇІєЄ]/,\r\n        \"Your password is little secure. Add a letter!\"\r\n      )\r\n      .matches(/^[a-zа-яA-ZА-ЯіїЇІЄє1-9]/, \"Enter a valid Password*\")\r\n      .required(\"Enter a Password*\"),\r\n  });\r\n\r\n  const handleSubmit = (values, actions) => {\r\n    // console.log(\"actions: \", actions);\r\n    // console.log(\"values: \", values);\r\n    const { resetForm } = actions;\r\n\r\n    // Передача даних в контекст (глобальний стейт)\r\n    onRegister(values);\r\n\r\n    // Очистка форми\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={registerSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {(props) => (\r\n          <StyledForm>\r\n            <h2>Registration</h2>\r\n            <InputWrapper>\r\n              <label htmlFor=\"name\" className={css.label}>\r\n                Name\r\n              </label>\r\n              <Input\r\n                name=\"name\"\r\n                type=\"text\"\r\n                id=\"name\"\r\n                autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.name,\r\n                  props.values.name,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"name\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"lastName\" className={css.label}>\r\n                Last Name\r\n              </label>\r\n              <Input\r\n                name=\"lastName\"\r\n                type=\"text\"\r\n                id=\"lastName\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.lastName,\r\n                  props.values.lastName,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"lastName\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"company\" className={css.label}>\r\n                Company\r\n              </label>\r\n              <Input\r\n                name=\"company\"\r\n                type=\"text\"\r\n                id=\"company\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.company,\r\n                  props.values.company,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"company\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"jobRole\" className={css.label}>\r\n                Job Role\r\n              </label>\r\n              <Input\r\n                name=\"jobRole\"\r\n                type=\"text\"\r\n                id=\"jobRole\"\r\n                // autoFocus\r\n                bordercolor={validationColor(\r\n                  props.errors.jobRole,\r\n                  props.values.jobRole,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"jobRole\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"phone\" className={css.label}>\r\n                Phone\r\n              </label>\r\n              <Input\r\n                name=\"phone\"\r\n                type=\"phone\"\r\n                id=\"phone\"\r\n                bordercolor={validationColor(\r\n                  props.errors.phone,\r\n                  props.values.phone,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"phone\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"email\" className={css.label}>\r\n                Email\r\n              </label>\r\n              <Input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                id=\"email\"\r\n                bordercolor={validationColor(\r\n                  props.errors.email,\r\n                  props.values.email,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"email\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <InputWrapper>\r\n              <label htmlFor=\"password\" className={css.label}>\r\n                Password\r\n              </label>\r\n              <Input\r\n                name=\"password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                bordercolor={validationColor(\r\n                  props.errors.password,\r\n                  props.values.password,\r\n                  \"rgb(0, 0, 0)\"\r\n                )}\r\n              />\r\n              <ErrorMessage\r\n                name=\"password\"\r\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\r\n              />\r\n            </InputWrapper>\r\n            <FormButtonWrapper>\r\n              <Button type=\"submit\">Send</Button>\r\n              <StyledLink to={\"/login\"}>LogIn</StyledLink>\r\n            </FormButtonWrapper>\r\n          </StyledForm>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from \"react\";\r\nimport Section from \"../../components/Section/Section\";\r\nimport RegistrationForm from \"../../components/RegistrationForm/RegistrationForm\";\r\nconst RegisterPage = () => {\r\n  return (\r\n    <Section>\r\n      <RegistrationForm />\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","InputWrapper","div","_templateObject2","Input","Field","_templateObject3","props","theme","colors","backgroundWhite","borders","bold","_ref","bordercolor","radii","normal","black","_ref2","StyledLink","NavLink","_templateObject4","hover","ErrorMessageStyled","label","_templateObject5","_templateObject6","invalid","FormButtonWrapper","_templateObject7","onRegister","useContext","context","registerSchema","yup","shape","name","min","max","required","lastName","company","jobRole","email","phone","matches","password","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","_jsxs","htmlFor","className","css","type","id","autoFocus","validationColor","errors","ErrorMessage","render","msg","Button","to","Section","RegistrationForm"],"sourceRoot":""}