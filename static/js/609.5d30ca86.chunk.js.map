{"version":3,"file":"static/js/609.5d30ca86.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegisterForm.styled.js","components/CompleteRegistrationForm/CompleteRegistrationForm.jsx","pages/CompleteRegistrationPage/CompleteRegistrationPage.jsx","webpack://classifier/./src/components/RegistrationForm/RegistrationForm.module.css?5637"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\nimport { Form, Field } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n`;\n\nexport const InputWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nexport const Input = styled(Field)`\n  background-color: ${(props) => props.theme.colors.backgroundWhite};\n  border: ${(props) => props.theme.borders.bold};\n  border-color: ${({ bordercolor }) => bordercolor};\n  border-radius: ${(props) => props.theme.radii.normal};\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  letter-spacing: -0.02em;\n  /* padding: 12px 12px 12px 40px; */\n  padding: 4px;\n  color: ${(props) => props.theme.colors.black};\n\n  @media screen and (min-width: 480px) {\n    font-size: 14px;\n    padding: 8px;\n  }\n\n  &:hover,\n  &:focus {\n    border: ${(props) => props.theme.borders.bold};\n    /* background-color: ${(props) => props.theme.colors.backgroundWhite}; */\n    border-color: ${({ bordercolor }) => bordercolor};\n  }\n`;\n\nexport const StyledLink = styled(NavLink)`\n  &:hover,\n  &:focus {\n    color: ${(props) => props.theme.colors.hover};\n  }\n`;\n\nexport const ErrorMessageStyled = styled.div`\n  color: ${(props) => props.theme.colors.invalid};\n  position: absolute;\n  right: 0;\n`;\n\nexport const FormButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  padding-top: 10px;\n  padding-bottom: 20px;\n  @media screen and (min-width: 480px) {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n`;\n","import React, { useEffect, useContext } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { authContext as context } from \"../../context/authContext\";\nimport { token } from \"../../services/api\";\n\nimport { Formik, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { validationColor } from \"../../services/utility\";\nimport { Button } from \"../Button/Button\";\nimport css from \"../RegistrationForm/RegistrationForm.module.css\";\nimport {\n  StyledForm,\n  Input,\n  InputWrapper,\n  ErrorMessageStyled,\n  FormButtonWrapper,\n} from \"../RegistrationForm/RegisterForm.styled\";\n\nconst CompleteRegistrationForm = () => {\n  // const [token, setTokenState] = useState(null);\n  const { onCompleteRegistration, setToken } = useContext(context);\n  const { userId } = useParams();\n  const location = useLocation();\n\n  const initialValues = {\n    lastName: \"\",\n    company: \"\",\n    jobRole: \"\",\n    phone: \"\",\n  };\n\n  const registerSchema = yup.object().shape({\n    lastName: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    company: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    jobRole: yup\n      .string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    phone: yup\n      .string()\n      .matches(/^\\d+$/, \"Invalid phone number\") // Перевірка на наявність тільки цифр\n      .min(10, \"Too short phone number\") // Мінімальна довжина номера\n      .max(15, \"Too long phone number\") // Максимальна довжина номера\n      .required(\"Required\"), // Обов'язкове поле\n  });\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const tokenParam = searchParams.get(\"token\");\n    console.log(\"tokenParam: \", tokenParam);\n\n    if (tokenParam) {\n      setToken(tokenParam);\n      token.set(tokenParam);\n      // setTokenState(tokenParam);\n    }\n  }, [location, setToken]);\n\n  const handleSubmit = (values, actions) => {\n    // console.log(\"actions: \", actions);\n    // console.log(\"values: \", values);\n    const { resetForm } = actions;\n\n    const userCredentials = {\n      userId: userId,\n      ...values,\n    };\n\n    // Передача даних в контекст (глобальний стейт)\n    onCompleteRegistration(userCredentials);\n\n    // Очистка форми\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {(props) => (\n          <StyledForm>\n            <h2>Complete registration</h2>\n\n            <InputWrapper>\n              <label htmlFor=\"lastName\" className={css.label}>\n                Last Name\n              </label>\n              <Input\n                name=\"lastName\"\n                type=\"text\"\n                id=\"lastName\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.lastName,\n                  props.values.lastName,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"lastName\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"company\" className={css.label}>\n                Company\n              </label>\n              <Input\n                name=\"company\"\n                type=\"text\"\n                id=\"company\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.company,\n                  props.values.company,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"company\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"jobRole\" className={css.label}>\n                Job Role\n              </label>\n              <Input\n                name=\"jobRole\"\n                type=\"text\"\n                id=\"jobRole\"\n                // autoFocus\n                bordercolor={validationColor(\n                  props.errors.jobRole,\n                  props.values.jobRole,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"jobRole\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n            <InputWrapper>\n              <label htmlFor=\"phone\" className={css.label}>\n                Phone\n              </label>\n              <Input\n                name=\"phone\"\n                type=\"phone\"\n                id=\"phone\"\n                bordercolor={validationColor(\n                  props.errors.phone,\n                  props.values.phone,\n                  \"rgb(0, 0, 0)\"\n                )}\n              />\n              <ErrorMessage\n                name=\"phone\"\n                render={(msg) => <ErrorMessageStyled>{msg}</ErrorMessageStyled>}\n              />\n            </InputWrapper>\n\n            <FormButtonWrapper>\n              <Button type=\"submit\">Send</Button>\n            </FormButtonWrapper>\n          </StyledForm>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default CompleteRegistrationForm;\n","import React from \"react\";\nimport Section from \"../../components/Section/Section\";\nimport CompleteRegistrationForm from \"../../components/CompleteRegistrationForm/CompleteRegistrationForm\";\n\nconst CompleteRegistrationPage = () => {\n  return (\n    <Section>\n      <CompleteRegistrationForm />\n    </Section>\n  );\n};\n\nexport default CompleteRegistrationPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"RegistrationForm_formWrapper__9O7CZ\",\"form\":\"RegistrationForm_form__c8X43\",\"inputWrapper\":\"RegistrationForm_inputWrapper__GNlbh\",\"label\":\"RegistrationForm_label__zrkEU\",\"input\":\"RegistrationForm_input__EgGQR\",\"submitBtn\":\"RegistrationForm_submitBtn__12JmY\",\"loginBtn\":\"RegistrationForm_loginBtn__WMC6w\"};"],"names":["StyledForm","styled","Form","InputWrapper","div","Input","Field","props","theme","colors","backgroundWhite","borders","bold","_ref","bordercolor","radii","normal","black","_ref2","StyledLink","NavLink","hover","ErrorMessageStyled","invalid","FormButtonWrapper","CompleteRegistrationForm","onCompleteRegistration","setToken","useContext","context","userId","useParams","location","useLocation","registerSchema","yup","shape","lastName","min","max","required","company","jobRole","phone","matches","useEffect","tokenParam","URLSearchParams","search","get","console","log","token","set","_jsx","_Fragment","children","Formik","initialValues","validationSchema","onSubmit","handleSubmit","values","actions","resetForm","userCredentials","_jsxs","htmlFor","className","css","label","name","type","id","validationColor","errors","ErrorMessage","render","msg","Button","CompleteRegistrationPage","Section"],"sourceRoot":""}